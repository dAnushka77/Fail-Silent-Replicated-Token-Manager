// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: token/token.proto

package token

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenServiceClient interface {
	Token_Create(ctx context.Context, in *Create_ID, opts ...grpc.CallOption) (*Token_Info, error)
	Token_Read(ctx context.Context, in *Read_ID, opts ...grpc.CallOption) (*Final, error)
	Token_Write(ctx context.Context, in *Write_ID, opts ...grpc.CallOption) (*Partial, error)
	Token_Drop(ctx context.Context, in *Drop_ID, opts ...grpc.CallOption) (*Drop_Info, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) Token_Create(ctx context.Context, in *Create_ID, opts ...grpc.CallOption) (*Token_Info, error) {
	out := new(Token_Info)
	err := c.cc.Invoke(ctx, "/token.token_service/Token_Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Token_Read(ctx context.Context, in *Read_ID, opts ...grpc.CallOption) (*Final, error) {
	out := new(Final)
	err := c.cc.Invoke(ctx, "/token.token_service/Token_Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Token_Write(ctx context.Context, in *Write_ID, opts ...grpc.CallOption) (*Partial, error) {
	out := new(Partial)
	err := c.cc.Invoke(ctx, "/token.token_service/Token_Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenServiceClient) Token_Drop(ctx context.Context, in *Drop_ID, opts ...grpc.CallOption) (*Drop_Info, error) {
	out := new(Drop_Info)
	err := c.cc.Invoke(ctx, "/token.token_service/Token_Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
// All implementations must embed UnimplementedTokenServiceServer
// for forward compatibility
type TokenServiceServer interface {
	Token_Create(context.Context, *Create_ID) (*Token_Info, error)
	Token_Read(context.Context, *Read_ID) (*Final, error)
	Token_Write(context.Context, *Write_ID) (*Partial, error)
	Token_Drop(context.Context, *Drop_ID) (*Drop_Info, error)
	mustEmbedUnimplementedTokenServiceServer()
}

// UnimplementedTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (UnimplementedTokenServiceServer) Token_Create(context.Context, *Create_ID) (*Token_Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token_Create not implemented")
}
func (UnimplementedTokenServiceServer) Token_Read(context.Context, *Read_ID) (*Final, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token_Read not implemented")
}
func (UnimplementedTokenServiceServer) Token_Write(context.Context, *Write_ID) (*Partial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token_Write not implemented")
}
func (UnimplementedTokenServiceServer) Token_Drop(context.Context, *Drop_ID) (*Drop_Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token_Drop not implemented")
}
func (UnimplementedTokenServiceServer) mustEmbedUnimplementedTokenServiceServer() {}

// UnsafeTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServiceServer will
// result in compilation errors.
type UnsafeTokenServiceServer interface {
	mustEmbedUnimplementedTokenServiceServer()
}

func RegisterTokenServiceServer(s grpc.ServiceRegistrar, srv TokenServiceServer) {
	s.RegisterService(&TokenService_ServiceDesc, srv)
}

func _TokenService_Token_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Create_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Token_Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.token_service/Token_Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Token_Create(ctx, req.(*Create_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Token_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Read_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Token_Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.token_service/Token_Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Token_Read(ctx, req.(*Read_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Token_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Write_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Token_Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.token_service/Token_Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Token_Write(ctx, req.(*Write_ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenService_Token_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Drop_ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Token_Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.token_service/Token_Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Token_Drop(ctx, req.(*Drop_ID))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenService_ServiceDesc is the grpc.ServiceDesc for TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.token_service",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token_Create",
			Handler:    _TokenService_Token_Create_Handler,
		},
		{
			MethodName: "Token_Read",
			Handler:    _TokenService_Token_Read_Handler,
		},
		{
			MethodName: "Token_Write",
			Handler:    _TokenService_Token_Write_Handler,
		},
		{
			MethodName: "Token_Drop",
			Handler:    _TokenService_Token_Drop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token/token.proto",
}
